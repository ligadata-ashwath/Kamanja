
package com.ligadata.messagescontainers

import org.json4s.jackson.JsonMethods._
import org.json4s.DefaultFormats
import org.json4s.Formats
import scala.xml.XML
import scala.xml.Elem
import com.ligadata.KamanjaBase.{ InputData, DelimitedData, JsonData, XmlData }
import com.ligadata.BaseTypes._
import com.ligadata.KamanjaBase.SerializeDeserialize
import java.io.{ DataInputStream, DataOutputStream, ByteArrayOutputStream }

import com.ligadata.KamanjaBase.{ BaseMsg, BaseMsgObj, TransformMessage, BaseContainer, MdBaseResolveInfo, MessageContainerBase }

object System_TransactionMsg_1000000 extends BaseMsgObj with RDDObject {
  override def TransformDataAttributes: TransformMessage = null
  override def NeedToTransformData: Boolean = false
  override def FullName: String = "System.TransactionMsg"
  override def NameSpace: String = "System"
  override def Name: String = "TransactionMsg"
  override def Version: String = "000000.000001.000000"
  override def CreateNewMessage: BaseMsg = new System_TransactionMsg_1000000()
  override def IsFixed: Boolean = true;
  override def IsKv: Boolean = false;
  override def CanPersist: Boolean = true;

  val partitionKeys: Array[String] = Array("custid")
  val partKeyPos = Array(0)
  val primaryKeys: Array[String] = Array("branchid", "accno")
  val prmryKeyPos = Array(1, 2)
  override def PartitionKeyData(inputdata: InputData): Array[String] = ...
  override def PrimaryKeyData(inputdata: InputData): Array[String] = ...
  
  // Get Most Recent Message for Current Partition Key
  def GetRecentRDDForCurrentPartitionKey: RDD[System_TransactionMsg_1000000] = ...

  // Get by Current (Partition) Key
  override def GetRDDForCurrentPartitionKey(tmRange: TimeRangeObject, f: System_TransactionMsg_1000000 => Boolean): RDD[System_TransactionMsg_1000000] = ...
  override def GetRDDForCurrentPartitionKey(f: System_TransactionMsg_1000000 => Boolean): RDD[System_TransactionMsg_1000000] = ...
  override def GetRDDForCurrentPartitionKey: RDD[System_TransactionMsg_1000000] = ... // Should return some error/exception on facts if the size is too big

  // Get by Partition Key
  override def GetRDDForPartitionKey(partitionKey: Array[String], tmRange: TimeRangeObject, f: System_TransactionMsg_1000000 => Boolean): RDD[System_TransactionMsg_1000000] = ...
  override def GetRDDForPartitionKey(partitionKey: Array[String], f: System_TransactionMsg_1000000 => Boolean): RDD[System_TransactionMsg_1000000] = ...
  override def GetRDDForPartitionKey(partitionKey: Array[String]): RDD[System_TransactionMsg_1000000] = ... // Should return some error/exception on facts if the size is too big
}

class System_TransactionMsg_1000000 extends BaseMsg {
  override def IsFixed: Boolean = true;
  override def IsKv: Boolean = false;
  override def CanPersist: Boolean = true;
  override def FullName: String = "System.TransactionMsg"
  override def NameSpace: String = "System"
  override def Name: String = "TransactionMsg"
  override def Version: String = "000000.000001.000000"

  var custid: Long = _;
  var branchid: Int = _;
  var accno: Long = _;
  var amount: Double = _;
  var balance: Double = _;
  var date: Int = _;
  var time: Int = _;
  var locationid: Int = _;
  var transtype: String = _;

  override def PartitionKeyData: Array[String] = Array(custid.toString)
  override def PrimaryKeyData: Array[String] = Array(branchid.toString, accno.toString)
  override def set(key: String, value: Any): Unit = { throw new Exception("set function is not yet implemented") }
  override def get(key: String): Any = ...
  override def getOrElse(key: String, default: Any): Any = { throw new Exception("getOrElse function is not yet implemented") }
  override def AddMessage(childPath: Array[(String, String)], msg: BaseMsg): Unit = ...
  override def GetMessage(childPath: Array[(String, String)], primaryKey: Array[String]): com.ligadata.KamanjaBase.BaseMsg = ...
  override def populate(inputdata: InputData) = ...
  override def Serialize(dos: DataOutputStream): Unit = ...
  override def Deserialize(dis: DataInputStream, mdResolver: MdBaseResolveInfo, loader: java.lang.ClassLoader, savedDataVersion: String): Unit = ...
}

// ============================================================


object System_CustomerInfo_1000000 extends BaseMsgObj with RDDObject {
  override def TransformDataAttributes: TransformMessage = null
  override def NeedToTransformData: Boolean = false
  override def FullName: String = "System.CustomerInfo"
  override def NameSpace: String = "System"
  override def Name: String = "CustomerInfo"
  override def Version: String = "000000.000001.000000"
  override def CreateNewMessage: BaseMsg = new System_CustomerInfo_1000000()
  override def IsFixed: Boolean = true;
  override def IsKv: Boolean = false;
  override def CanPersist: Boolean = true;

  val partitionKeys: Array[String] = Array("custid")
  val partKeyPos = Array(0)
  val primaryKeys: Array[String] = Array("branchid", "accno")
  val prmryKeyPos = Array(1, 2)
  override def PartitionKeyData(inputdata: InputData): Array[String] = ...
  override def PrimaryKeyData(inputdata: InputData): Array[String] = ...
  
  // Get Most Recent Message for Current Partition Key
  def GetRecentRDDForCurrentPartitionKey: RDD[System_CustomerInfo_1000000] = ...

  // Get by Current (Partition) Key
  override def GetRDDForCurrentPartitionKey(tmRange: TimeRangeObject, f: System_CustomerInfo_1000000 => Boolean): RDD[System_CustomerInfo_1000000] = ...
  override def GetRDDForCurrentPartitionKey(f: System_CustomerInfo_1000000 => Boolean): RDD[System_CustomerInfo_1000000] = ...
  override def GetRDDForCurrentPartitionKey: RDD[System_CustomerInfo_1000000] = ... // Should return some error/exception on facts if the size is too big

  // Get by Partition Key
  override def GetRDDForPartitionKey(partitionKey: Array[String], tmRange: TimeRangeObject, f: System_CustomerInfo_1000000 => Boolean): RDD[System_CustomerInfo_1000000] = ...
  override def GetRDDForPartitionKey(partitionKey: Array[String], f: System_CustomerInfo_1000000 => Boolean): RDD[System_CustomerInfo_1000000] = ...
  override def GetRDDForPartitionKey(partitionKey: Array[String]): RDD[System_CustomerInfo_1000000] = ... // Should return some error/exception on facts if the size is too big
}

class System_CustomerInfo_1000000 extends BaseMsg {
  override def IsFixed: Boolean = true;
  override def IsKv: Boolean = false;
  override def CanPersist: Boolean = true;
  override def FullName: String = "System.CustomerInfo"
  override def NameSpace: String = "System"
  override def Name: String = "CustomerInfo"
  override def Version: String = "000000.000001.000000"

  var custid: Long = _;
  var cellnum: String = _;
  var branchid: Int = _;
  var accno: Long = _;

  override def PartitionKeyData: Array[String] = Array(custid.toString)
  override def PrimaryKeyData: Array[String] = Array(branchid.toString, accno.toString)
  override def set(key: String, value: Any): Unit = { throw new Exception("set function is not yet implemented") }
  override def get(key: String): Any = ...
  override def getOrElse(key: String, default: Any): Any = { throw new Exception("getOrElse function is not yet implemented") }
  override def AddMessage(childPath: Array[(String, String)], msg: BaseMsg): Unit = ...
  override def GetMessage(childPath: Array[(String, String)], primaryKey: Array[String]): com.ligadata.KamanjaBase.BaseMsg = ...
  override def populate(inputdata: InputData) = ...
  override def Serialize(dos: DataOutputStream): Unit = ...
  override def Deserialize(dis: DataInputStream, mdResolver: MdBaseResolveInfo, loader: java.lang.ClassLoader, savedDataVersion: String): Unit = ...
}

// ============================================================

object System_CustomerPreferences_1000000 extends BaseContainerObj with RDDObject {
  override def FullName: String = "System.CustomerPreferences"
  override def NameSpace: String = "System"
  override def Name: String = "CustomerPreferences"
  override def Version: String = "000000.000001.000000"
  override def CreateNewContainer: BaseContainer = new System_CustomerPreferences_1000000()
  override def IsFixed: Boolean = true;
  override def IsKv: Boolean = false;
  override def CanPersist: Boolean = true;

  val partitionKeys: Array[String] = Array("custid")
  val partKeyPos = Array(0)

  override def PartitionKeyData(inputdata: InputData): Array[String] = ...
  override def PrimaryKeyData(inputdata: InputData): Array[String] = ...

  // Get Most Recent Message for Current Partition Key
  def GetRecentRDDForCurrentPartitionKey: RDD[System_CustomerPreferences_1000000] = ...

  // Get by Current (Partition) Key
  override def GetRDDForCurrentPartitionKey(tmRange: TimeRangeObject, f: System_CustomerPreferences_1000000 => Boolean): RDD[System_CustomerPreferences_1000000]
  override def GetRDDForCurrentPartitionKey(f: System_CustomerPreferences_1000000 => Boolean): RDD[System_CustomerPreferences_1000000]
  override def GetRDDForCurrentPartitionKey: RDD[System_CustomerPreferences_1000000] // Should return some error/exception on facts if the size is too big

  // Get by Partition Key
  override def GetRDDForPartitionKey(partitionKey: Array[String], tmRange: TimeRangeObject, f: System_CustomerPreferences_1000000 => Boolean): RDD[System_CustomerPreferences_1000000]
  override def GetRDDForPartitionKey(partitionKey: Array[String], f: System_CustomerPreferences_1000000 => Boolean): RDD[System_CustomerPreferences_1000000]
  override def GetRDDForPartitionKey(partitionKey: Array[String]): RDD[System_CustomerPreferences_1000000] // Should return some error/exception on facts if the size is too big
}

class System_CustomerPreferences_1000000 extends BaseContainer {
  override def IsFixed: Boolean = true;
  override def IsKv: Boolean = false;
  override def CanPersist: Boolean = true;
  override def FullName: String = "System.CustomerPreferences"
  override def NameSpace: String = "System"
  override def Name: String = "CustomerPreferences"
  override def Version: String = "000000.000001.000000"

  var custid: Long = _;
  var branchid: Int = _;
  var accno: Long = _;
  var minbalancealertoptout: String = _;
  var overdraftlimit: Double = _;

  override def PartitionKeyData: Array[String] = Array(custid.toString)
  override def PrimaryKeyData: Array[String] = Array[String]()
  override def set(key: String, value: Any): Unit = ...
  override def get(key: String): Any = ...
  override def getOrElse(key: String, default: Any): Any = ...
  override def AddMessage(childPath: Array[(String, String)], msg: BaseMsg): Unit = ...
  override def GetMessage(childPath: Array[(String, String)], primaryKey: Array[String]): com.ligadata.KamanjaBase.BaseMsg = ...
  def populate(inputdata: InputData) = ...
  override def Serialize(dos: DataOutputStream): Unit = ...
  override def Deserialize(dis: DataInputStream, mdResolver: MdBaseResolveInfo, loader: java.lang.ClassLoader, savedDataVersion: String): Unit = ...
}

// ============================================================

object System_AlertHistory_1000000 extends BaseContainerObj with RDDObject {
  override def FullName: String = "System.AlertHistory"
  override def NameSpace: String = "System"
  override def Name: String = "AlertHistory"
  override def Version: String = "000000.000001.000000"
  override def CreateNewContainer: BaseContainer = new System_AlertHistory_1000000()
  override def IsFixed: Boolean = true;
  override def IsKv: Boolean = false;
  override def CanPersist: Boolean = true;

  val partitionKeys: Array[String] = Array("custid")
  val partKeyPos = Array(0)

  override def PartitionKeyData(inputdata: InputData): Array[String] = ...
  override def PrimaryKeyData(inputdata: InputData): Array[String] = ...

  // Get Most Recent Message for Current Partition Key
  def GetRecentRDDForCurrentPartitionKey: RDD[System_AlertHistory_1000000] = ...

  // Get by Current (Partition) Key
  override def GetRDDForCurrentPartitionKey(tmRange: TimeRangeObject, f: System_AlertHistory_1000000 => Boolean): RDD[System_AlertHistory_1000000]
  override def GetRDDForCurrentPartitionKey(f: System_AlertHistory_1000000 => Boolean): RDD[System_AlertHistory_1000000]
  override def GetRDDForCurrentPartitionKey: RDD[System_AlertHistory_1000000] // Should return some error/exception on facts if the size is too big

  // Get by Partition Key
  override def GetRDDForPartitionKey(partitionKey: Array[String], tmRange: TimeRangeObject, f: System_AlertHistory_1000000 => Boolean): RDD[System_AlertHistory_1000000]
  override def GetRDDForPartitionKey(partitionKey: Array[String], f: System_AlertHistory_1000000 => Boolean): RDD[System_AlertHistory_1000000]
  override def GetRDDForPartitionKey(partitionKey: Array[String]): RDD[System_AlertHistory_1000000] // Should return some error/exception on facts if the size is too big
}

class System_AlertHistory_1000000 extends BaseContainer {
  override def IsFixed: Boolean = true;
  override def IsKv: Boolean = false;
  override def CanPersist: Boolean = true;
  override def FullName: String = "System.AlertHistory"
  override def NameSpace: String = "System"
  override def Name: String = "AlertHistory"
  override def Version: String = "000000.000001.000000"

  var custid: Long = _;
  var branchid: Int = _;
  var accno: Long = _;
  var lastalertdate: Int = _;

  override def PartitionKeyData: Array[String] = Array(custid.toString)
  override def PrimaryKeyData: Array[String] = Array[String]()
  override def set(key: String, value: Any): Unit = ...
  override def get(key: String): Any = ...
  override def getOrElse(key: String, default: Any): Any = ...
  override def AddMessage(childPath: Array[(String, String)], msg: BaseMsg): Unit = ...
  override def GetMessage(childPath: Array[(String, String)], primaryKey: Array[String]): com.ligadata.KamanjaBase.BaseMsg = ...
  def populate(inputdata: InputData) = ...
  override def Serialize(dos: DataOutputStream): Unit = ...
  override def Deserialize(dis: DataInputStream, mdResolver: MdBaseResolveInfo, loader: java.lang.ClassLoader, savedDataVersion: String): Unit = ...
}

// ============================================================

