
// Model1:

// We generate an alert if min balance < 100 and if we haven't issued any 
// alert today and if minBalanceAlertOptOut is N.

object System_Model1_1000000 extends ModelBaseObj {
  override def getModelName: String = "System.Model1"
  override def getVersion: String = "1000000"
  override def getModelVersion: String = getVersion
  override def IsValidMessage(msg: MessageContainerBase): Boolean = ...
  override def CreateNewModel(tempTransId: Long, gCtx : EnvContext, msg : MessageContainerBase, tenantId: String): ModelBase = ...
} 

class System_Model1_1000000(val gCtx : EnvContext, val msg : BaseMsg, val modelName:String, val modelVersion:String, val tenantId: String, val tempTransId: Long) extends ModelBase {
  val ctx : com.ligadata.Pmml.Runtime.Context = new com.ligadata.Pmml.Runtime.Context(tempTransId)
  def GetContext : Context = { ctx }
  override def getModelName : String = System_Model1_1000000.getModelName
  override def getVersion : String = System_Model1_1000000.getVersion
  override def getTenantId : String = tenantId
  override def getTempTransId: Long = tempTransId

  override def execute(emitAllResults : Boolean) : ModelResult = {
    val custInfo = ${System.CustomerInfo}.GetRecentRDDForCurrentPartitionKey
    if (custInfo.isEmpty || custInfo.last.get.minbalancealertoptout != "N")
      return null
    val currentDate = current_date
    val custAlertHistory = ${System.CustomerAlertHistory}.GetRecentRDDForCurrentPartitionKey
    if (custAlertHistory.isEmpty == false && currentDate <= custAlertHistory.last.get.lastalertdate) // today
      return null
    val rcntTxn = ${System.TransactionMsg}.GetRecentRDDForCurrentPartitionKey
    if (rcntTxn.isEmpty || txn.balance >= 100)
      return null

    // ... Prepare results here ...
    new ModelResult(dateMillis, nowStr, getModelName, getModelVersion, results) 
  }
}

==========

// Model2:

// We generate an alert if min balance < 100 in last 30 days (rolling time window) and if we haven't issued any 
// alert in last two days and if minBalanceAlertOptOut is N.

object System_Model2_1000000 extends ModelBaseObj {
  override def getModelName: String = "System.Model2"
  override def getVersion: String = "1000000"
  override def getModelVersion: String = getVersion
  override def IsValidMessage(msg: MessageContainerBase): Boolean = ...
  override def CreateNewModel(tempTransId: Long, gCtx : EnvContext, msg : MessageContainerBase, tenantId: String): ModelBase = ...
} 

class System_Model2_1000000(val gCtx : EnvContext, val msg : BaseMsg, val modelName:String, val modelVersion:String, val tenantId: String, val tempTransId: Long) extends ModelBase {
  val ctx : com.ligadata.Pmml.Runtime.Context = new com.ligadata.Pmml.Runtime.Context(tempTransId)
  def GetContext : Context = { ctx }
  override def getModelName : String = System_Model2_1000000.getModelName
  override def getVersion : String = System_Model2_1000000.getVersion
  override def getTenantId : String = tenantId
  override def getTempTransId: Long = tempTransId

  override def execute(emitAllResults : Boolean) : ModelResult = {
    val custInfo = ${System.CustomerInfo}.GetRecentRDDForCurrentPartitionKey
    if (custInfo.isEmpty || custInfo.last.get.minbalancealertoptout != "N")
      return null
    val currentDate = current_date
    val custAlertHistory = ${System.CustomerAlertHistory}.GetRecentRDDForCurrentPartitionKey
    if (custAlertHistory.isEmpty == false && ((currentDate - custAlertHistory.last.get.lastalertdate) < 2)) // 2 days check
      return null
    val monthAgo = TimeRange.MonthAgo(currentDate)
    val monthTxns = ${System.TransactionMsg}.GetRDDForCurrentPartitionKey(new TimeRange(monthAgo, currentDate), (t: TransactionMsg) => {true})

    val minBal = monthTxns.min((prevBal: Option[Double], txn: TransactionMsg) => { if (prevBal != None && prevBal.get < txn.balance) prevBal else Some(txn.balance) })

    if (minBal != None && minBal.get < 100) {
      // ... Prepare results here ...
      new ModelResult(dateMillis, nowStr, getModelName, getModelVersion, results) 
    }
    else {
      null
    }
  }
}

=======

// Model3:

// We generate an alert if min balance < 100 more than 3 times in last 30 days (rolling time window) and if we haven't issued any 
// alert in last two days and if minBalanceAlertOptOut is N.

object System_Model3_1000000 extends ModelBaseObj {
  override def getModelName: String = "System.Model3"
  override def getVersion: String = "1000000"
  override def getModelVersion: String = getVersion
  override def IsValidMessage(msg: MessageContainerBase): Boolean = ...
  override def CreateNewModel(tempTransId: Long, gCtx : EnvContext, msg : MessageContainerBase, tenantId: String): ModelBase = ...
} 

class System_Model3_1000000(val gCtx : EnvContext, val msg : BaseMsg, val modelName:String, val modelVersion:String, val tenantId: String, val tempTransId: Long) extends ModelBase {
  val ctx : com.ligadata.Pmml.Runtime.Context = new com.ligadata.Pmml.Runtime.Context(tempTransId)
  def GetContext : Context = { ctx }
  override def getModelName : String = System_Model3_1000000.getModelName
  override def getVersion : String = System_Model3_1000000.getVersion
  override def getTenantId : String = tenantId
  override def getTempTransId: Long = tempTransId

  override def execute(emitAllResults : Boolean) : ModelResult = {
    val custInfo = ${System.CustomerInfo}.GetRecentRDDForCurrentPartitionKey
    if (custInfo.isEmpty || custInfo.last.get.minbalancealertoptout != "N")
      return null
    val currentDate = current_date
    val custAlertHistory = ${System.CustomerAlertHistory}.GetRecentRDDForCurrentPartitionKey
    if (custAlertHistory.isEmpty == false && ((currentDate - custAlertHistory.last.get.lastalertdate) < 2)) // 2 days check
      return null
    val monthAgo = TimeRange.MonthAgo(currentDate)
    val minBalLastMonthTxns = ${System.TransactionMsg}.GetRDDForCurrentPartitionKey(new TimeRange(monthAgo, currentDate), (t: TransactionMsg) => { txn.balance < 100 })

    if (minBalLastMonthTxns.size > 2) {
      // ... Prepare results here ...
      new ModelResult(dateMillis, nowStr, getModelName, getModelVersion, results) 
    }
    else {
      null
    }
  }
}

