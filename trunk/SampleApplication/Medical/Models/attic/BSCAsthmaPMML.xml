
<!--
AsthmaPMML.xml 
-->

<PMML xmlns="http://www.dmg.org/PMML-4_1" version="4.1">

	<Header copyright="Edifecs Copyright 2014" description="Industry established measures to evaluate likelihood of patient having asthma">
		<Application name="AsthmaRisk" version="2014.06.05.0.1"/>
	</Header>

	<DataDictionary numberOfFields="2">
		<DataField name="Std.InPatientCost" displayName="inpatientClaimCost" optype="continuous" dataType="double"/> <!-- sum of inpatient claim costs -->
		<DataField name="Std.OutPatientCost" displayName="inpatientClaimCost" optype="continuous" dataType="double"/> <!-- sum of outpatient claim costs -->

	</DataDictionary>

	<TransformationDictionary>
		<!-- builtins -->
		<DefineFunction name="ContainerFilterAnyBetween">
		    <ParameterField name="containerName" dataType="array"/>  
		    <ParameterField name="fieldName" dataType="array"/>  
		    <ParameterField name="Builtins.AnyBetween"/>  
		    <ParameterField name="LeftMargin"/>  
		    <ParameterField name="RightMargin"/>  
		    <ParameterField name="Inclusive" dataType="boolean"/>  
	  	</DefineFunction>
	
		<DefineFunction name="ContainerFilterThoseBetween">
		    <ParameterField name="containerName" dataType="array"/>  
		    <ParameterField name="fieldName" dataType="integer"/>  
		    <ParameterField name="Builtins.AnyBetween"/>  
		    <ParameterField name="LeftMargin"/>  
		    <ParameterField name="RightMargin"/>  
		    <ParameterField name="Inclusive" dataType="boolean"/>  
	  	</DefineFunction>
	
		<DefineFunction name="ContainerLength" dataType="integer" optype="continuous">
		    <ParameterField name="containerName" dataType="array"/>  
	  	</DefineFunction>
	
		<DefineFunction name="FieldValueBetween" dataType="integer" optype="continuous">
		    <ParameterField name="field" dataType="integer"/>  
		    <ParameterField name="LeftMargin" dataType="integer"/>  
		    <ParameterField name="RightMargin" dataType="integer"/>  
		    <ParameterField name="Inclusive" dataType="boolean"/>  
	  	</DefineFunction>
	  	
	  	
		<!-- generates xDict("MemberFilter") = If(And(FieldValueBetween(beneficiary.beneficiaryBase.Bene_Birth_Dt, 19800101, 20121231, true)
													,Equal(beneficiary.beneficiaryBase.Bene_Sex_Ident_Cd,0)) 1 else 0 -->
		<DerivedField name="MemberFilter" dataType="integer" optype="categorical">
			<Apply function="if">
				<Apply function="and">
					<Apply function="FieldValueBetween">
						<FieldRef field="beneficiary.beneficiaryBase.Bene_Birth_Dt"/>
					    <Constant dataType="integer">19800101</Constant>  
					    <Constant dataType="integer">20121231</Constant>  
					    <Constant dataType="boolean">true</Constant>  
					</Apply>
					<Apply function="equal">
						<FieldRef field="beneficiary.beneficiaryBase.Bene_Sex_Ident_Cd"/>
						<Constant dataType="integer">1</Constant> 
					</Apply>
				</Apply>   
				<Constant dataType="integer">1</Constant> 
				<Constant dataType="integer">0</Constant>       
			</Apply>
		</DerivedField>
			
		<!-- generates xDict("DataFilter") = {1 | 0} -->
		<DerivedField name="DataFilter" dataType="integer" optype="categorical">
			<Apply function="if">
				<Apply function="or">
					<Apply function="greaterThan">
						<Apply function="ContainerLength">
							<FieldRef field="Std.InPatientClaims"/>
						</Apply>
						<Constant dataType="integer">0</Constant> 
					</Apply>
					<Apply function="greaterThan">
						<Apply function="ContainerLength">
							<FieldRef field="Std.OutPatientClaims"/>
						</Apply>
						<Constant dataType="integer">0</Constant> 
					</Apply>
				</Apply>
				<Constant dataType="integer">1</Constant> 
				<Constant dataType="integer">0</Constant>       
			</Apply>
		</DerivedField>
		
		<!-- generates xDict("Std.InPatientClaims") = xDict.apply(InClaimDgnsFilter).filter((clm) => Builtins.AnyBetween(clm.Clm_Thru_Dt, 20080101, 20100101, true)) -->
		<DerivedField name="Std.InPatientClaims" dataType="Any" optype="categorical">
			<Apply function="ContainerFilterThoseBetween">
	       		<FieldRef field="InClaimDgnsFilter"/>
	 			<Constant>Clm_Thru_Dt</Constant> 
	 			<Constant>20080101</Constant> 
				<Constant>20100101</Constant> 
				<Constant>true</Constant> 
			</Apply>
		</DerivedField>
	
		<!-- generates xDict("Std.OutPatientClaims") = xDict.apply(OutClaimDgnsFilter).filter((clm) => Builtins.AnyBetween(clm.Clm_Thru_Dt, 20080101, 20100101, true)) -->
		<DerivedField name="Std.OutPatientClaims" dataType="Any" optype="categorical">
			<Apply function="ContainerFilterThoseBetween">
	       		<FieldRef field="OutClaimDgnsFilter"/>
	 			<Constant>Clm_Thru_Dt</Constant> 
	 			<Constant>20080101</Constant> 
				<Constant>20100101</Constant> 
				<Constant>true</Constant> 
			</Apply>
		</DerivedField>

		<!-- generates xDict("InClaimDgnsFilter") = beneficiary.Inpatient_Claims.filter((clm) => Builtins.AnyBetween(clm.Icd9_Dgns_Cds, 49300, 49392, true)) -->
		<DerivedField name="InClaimDgnsFilter" dataType="Any" optype="categorical">
			<Apply function="ContainerFilterAnyBetween">
	       		<FieldRef field="beneficiary.Inpatient_Claims"/>
	 			<Constant>Icd9_Dgns_Cds</Constant> 
	 			<Constant>49300</Constant> 
				<Constant>49392</Constant> 
				<Constant>true</Constant> 
			</Apply>
		</DerivedField>
	
		<!-- generates xDict("OutClaimDgnsFilter" => beneficiary.OutpatientClaims.filter((clm) => Builtins.AnyBetween(clm.Icd9_Dgns_Cds, 49300, 49392, true)) -->
		<DerivedField name="OutClaimDgnsFilter" dataType="Any" optype="categorical">
			<Apply function="ContainerFilterAnyBetween">
	       		<FieldRef field="beneficiary.Outpatient_Claims"/>
	 			<Constant>Icd9_Dgns_Cds</Constant> 
	 			<Constant>49300</Constant> 
				<Constant>49392</Constant> 
				<Constant>true</Constant> 
			</Apply>
		</DerivedField>


	<!-- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

	 HI LEVEL RULE CALCULATION IS BELOW... ABOVE HERE IS PRIMARILY FEATURE EXTRACTION (filtering) 

	 vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-->
	 
		<!-- generates xDict("hiRiskAsthmaMarker") = If(And(GreaterThan(dDict.apply("Std.InPatientCost").Value,200),GreaterThan(dDict.apply("Std.OutPatientCost",400))) 1 else 0 -->
		<DerivedField name="hiRiskAsthmaMarker" dataType="string" optype="categorical">
			<Apply function="if">
				<Apply function="and">
					<Apply function="greaterThan">
						<FieldRef field="Std.InPatientCost"/>
						<Constant dataType="integer">200</Constant>    
					</Apply>
					<Apply function="greaterThan">
						<FieldRef field="Std.OutPatientCost"/>
						<Constant dataType="integer">400</Constant>    
					</Apply>
				</Apply>
				<Constant dataType="string">1</Constant> 
				<Constant dataType="string">0</Constant>       
			</Apply>
		</DerivedField>
		
	</TransformationDictionary>

	<RuleSetModel modelName="AsthmaRisk" functionName="classification" algorithmName="RuleSet">
	    <MiningSchema>
			<MiningField name="beneficiary.beneficiaryBase.Bene_Birth_Dt" usageType="active"/>
			<MiningField name="beneficiary.beneficiaryBase.Bene_Sex_Ident_Cd" usageType="active"/>
			<MiningField name="beneficiary.Inpatient_Claims" usageType="active"/>
			<MiningField name="beneficiary.Outpatient_Claims" usageType="active"/>

			<MiningField name="MemberFilter" usageType="featureextraction"/>
			<MiningField name="DataFilter" usageType="featureextraction"/>
			<MiningField name="Std.InPatientClaims" usageType="featureextraction"/>
			<MiningField name="Std.OutPatientClaims" usageType="featureextraction"/>
			<MiningField name="InClaimDgnsFilter" usageType="featureextraction"/>
			<MiningField name="OutClaimDgnsFilter" usageType="featureextraction"/>
			<MiningField name="IsValidEventType" usageType="featureextraction"/>

			<MiningField name="hiRiskAsthmaMarker" usageType="predicted"/>
	    </MiningSchema>
	
		<RuleSet defaultScore="0" >  <!-- NOTE: default is NOT hi-risk hence no additional rule needed below -->
			<RuleSelectionMethod criterion="firstHit"/>

			<SimpleRule id="RULE1" score="1">
				<CompoundPredicate booleanOperator="and">
					<SimplePredicate field="beneficiary.beneficiaryBase.Bene_Sex_Ident_Cd" operator="equal" value="1"/>
					<SimplePredicate field="hiRiskAsthmaMarker" operator="equal" value="1"/>
				</CompoundPredicate>
			</SimpleRule>
	    </RuleSet> 
	</RuleSetModel>
</PMML>
