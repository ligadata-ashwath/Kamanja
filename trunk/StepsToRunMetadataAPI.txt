These steps are tested only on a Linux(centos 6.5) VM only
The following steps could be used if you have access complete GITHUB distribution of Kamanja.

** Install scala 2.10.4
** Install java SDK ( 1.7.1 or greater)
** Install joda time libraries 
   joda-convert-1.6.jar,joda-time-2.4.jar into a local directory(I place them under $HOME/libs)
   These jars file are needed in the classpath for successful compilation of
   scala code generated by model compiler
** In the trunk, (github/Kamanja/trunk) run the following command
cd $HOME/github/Kamanja/trunk
sbt package
sbt
> project MetadataAPI
> assembly
> exit
** copy the following blibraries from your environment to $KAMANJALIBPATH(same variable used
   by the engine, I am using $HOME/Kamanja for KAMANJALIBPATH) using the following commands
   These jars file are needed in the classpath for successful compilation of
   scala code generated by model compiler and message compiler. 

cp $HOME/github/Kamanja/trunk/BaseFunctions/target/scala-2.10/basefunctions_2.10-0.1.0.jar $HOME/Kamanja
cp $HOME/github/Kamanja/trunk/BaseTypes/target/scala-2.10/basetypes_2.10-0.1.0.jar $HOME/Kamanja
cp $HOME/github/Kamanja/trunk/MessageDef/target/scala-2.10/messagedef_2.10-1.0.jar $HOME/Kamanja
cp $HOME/github/Kamanja/trunk/Metadata/target/scala-2.10/metadata_2.10-1.0.jar $HOME/Kamanja
cp $HOME/github/Kamanja/trunk/KamanjaBase/target/scala-2.10/kamanjabase_2.10-1.0.jar $HOME/Kamanja
cp $HOME/github/Kamanja/trunk/Pmml/PmmlCompiler/target/scala-2.10/pmmlcompiler_2.10-1.0.jar $HOME/Kamanja
cp $HOME/github/Kamanja/trunk/Pmml/PmmlRuntime/target/scala-2.10/pmmlruntime_2.10-1.0.jar $HOME/Kamanja
cp $HOME/github/Kamanja/trunk/Pmml/PmmlUdfs/target/scala-2.10/pmmludfs_2.10-1.0.jar $HOME/Kamanja
cp $HOME/github/Kamanja/trunk/Pmml/MethodExtractor/target/scala-2.10/methodextractor_2.10-1.0.jar $HOME/Kamanja
cp $HOME/github/Kamanja/externals/log4j/log4j-1.2.17.jar $HOME/Kamanja

** Also copy json -jackson libraries, If you use sbt for compilation of MetadataAPI, these libraries will be available in $HOME/.ivy2
cp $HOME/.ivy2/cache/com.fasterxml.jackson.core/jackson-core/bundles/jackson-core-2.3.1.jar $HOME/Kamanja
cp $HOME/.ivy2/cache/com.fasterxml.jackson.core/jackson-annotations/bundles/jackson-annotations-2.3.0.jar $HOME/Kamanja
cp $HOME/.ivy2/cache/com.fasterxml.jackson.core/jackson-databind/bundles/jackson-databind-2.3.1.jar $HOME/Kamanja
cp $HOME/.ivy2/cache/org.json4s/json4s-core_2.10/jars/json4s-core_2.10-3.2.9.jar $HOME/Kamanja/
cp $HOME/.ivy2/cache/org.json4s/json4s-jackson_2.10/jars/json4s-jackson_2.10-3.2.9.jar $HOME/Kamanja/
cp $HOME/.ivy2/cache/org.json4s/json4s-ast_2.10/jars/json4s-ast_2.10-3.2.9.jar $HOME/Kamanja/
cp $HOME/.ivy2/cache/org.json4s/json4s-native_2.10/jars/json4s-native_2.10-3.2.9.jar $HOME/Kamanja/

** I have decided to use the json file as the config file for MetadataAPI. (ignore the MetadataAPI.properties from now)
** I have  hard-coded the default config file as $HOME/MetadataAPIConfig.json where $HOME is your home directory.

** I plan to change the default file path if and when we can settle on deployment tree for all the components.
** One Can optionally supply a config file as a command line argument as described below

** copy "Kamanja/trunk/MetadataAPI/src/main/resources/MetadataAPIConfig.json" to your home directory(must)

** Update the config file "$HOME/MetadataAPIConfig.json"
   to suit your environment. ( Replace /home/vmandava with your home directory etc.. )

** Contents of a sample MetadataAPIConfig.json

{
	"APIConfigParameters" :
	{ 
		 "RootDir"      : "/home/vmandava",
		 "GitRootDir"   : "/home/vmandava/github",
		 "Database"     : "treemap",
		 "DatabaseHost" : "localhost",
		 "JarTargetDir"	: "/tmp/KamanjaInstall",
		 "ScalaHome"  	: "/home/vmandava/scala-2.10.4",
		 "JavaHome"  	: "/home/vmandava/jdk1.8.0_05",
		 "ManifestPath"	: "/home/vmandava/git_hub/Kamanja/trunk/MetadataAPI/src/test/SampleTestFiles/Models/manifest.mf",
		 "ClassPath"  	: ".:/tmp/KamanjaInstall/metadata_2.10-1.0.jar:/tmp/KamanjaInstall/basefunctions_2.10-0.1.0.jar:/tmp/KamanjaInstall/messagedef_2.10-1.0.jar:/tmp/KamanjaInstall/methodextractor_2.10-1.0.jar:/tmp/KamanjaInstall/pmmlcompiler_2.10-1.0.jar:/tmp/KamanjaInstall/kamanjabase_2.10-1.0.jar:/tmp/KamanjaInstall/bootstrap_2.10-1.0.jar:/tmp/KamanjaInstall/joda-time-2.3.jar:/tmp/KamanjaInstall/joda-convert-1.6.jar:/tmp/KamanjaInstall/basetypes_2.10-0.1.0.jar:/tmp/KamanjaInstall/pmmludfs_2.10-1.0.jar:/tmp/KamanjaInstall/pmmlruntime_2.10-1.0.jar:/tmp/KamanjaInstall/json4s-native_2.10-3.2.9.jar:/tmp/KamanjaInstall/json4s-core_2.10-3.2.9.jar:/tmp/KamanjaInstall/json4s-ast_2.10-3.2.9.jar:/tmp/KamanjaInstall/jackson-databind-2.3.1.jar:/tmp/KamanjaInstall/jackson-annotations-2.3.0.jar:/tmp/KamanjaInstall/json4s-jackson_2.10-3.2.9.jar:/tmp/KamanjaInstall/jackson-core-2.3.1.jar:/tmp/KamanjaInstall/log4j-1.2.17.jar",
		 "NotifyEngine" : "NO",
		 "ZnodePath" : "/ligadata/metadata",
		 "ZooKeeperConnectString" : "localhost:2181"
	}
}


** Make sure the directory specified by the property "JAR_TARGET_DIR" exists
   (this directory is staging directory to compile scala code generated by model compiler)
** Note that classpath must contain all the necessary jar files that 
   are required to compile scala code generated by model compiler and message compiler.
** Alerting Engine(optional) when MetadataAPI objects are added/removed/updated
   Make sure ZooKeeper is installed and running on the host as defined by ZOOKEEPER_CONN_STRING
   Set the parameter NOTIFY_ENGINE to YES( by default it is set to NO)

** Start MetadataAPI test harness using fat-jar and default config file($HOME/MetadataAPIConfig.json)
cd $HOME/github/Kamanja/trunk
java -jar MetadataAPI/target/scala-2.10/MetadataAPI-1.0

** Start MetadataAPI test harness using fat-jar and your own config file(a complete path name of the file)
cd $HOME/github/Kamanja/trunk
java -jar MetadataAPI/target/scala-2.10/MetadataAPI-1.0 --config /tmp/KamanjaInstall/myMetadataAPIConfig.json
